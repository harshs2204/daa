import java.util.Scanner;

public class Djikstra
{
	public static void main(String[] args) 
	{
		// TODO Auto-generated method stub
		int i, j;

		int dist[]=new int[10], visited[]=new int[10]; 
		int cost[][]=new int[10][10], path[]=new int[10]; 
		
		Scanner in = new Scanner(System.in);
		System.out.println("Enter the number of nodes: "); 
		int n = in.nextInt();

		System.out.println("Enter the cost matrix"); 
		for(i=1;i<=n;i++)
			for(j=1;j<=n;j++)
				cost[i][j] = in.nextInt(); 
		
		System.out.println("The entered cost matrix is"); 
		for(i=1;i<=n;i++)
		{
			for(j=1;j<=n;j++)
			{
				System.out.print(cost[i][j]+"\t");
			}
			System.out.println();
		}

		System.out.println("Enter the source vertex: "); 
		int sv = in.nextInt(); 
		
		dij(cost,dist,sv,n,path,visited); 
		printpath(sv,n,dist,path,visited );

		
	}
	static void dij(int cost[][],int dist[],int sv,int n,int path[],int visited[])
	{
		int count = 2,min,v=0; 
		
		for(int i=1; i<=n; i++)
		{
			visited[i]=0;
			dist[i] = cost[sv][i]; 
			
			if(cost[sv][i] == 999) 
				path[i] = 0;
			else
				path[i] = sv;
		}

		visited[sv]=1; 
		
		while(count<=n)
		{
			min = 999;
			for(int w=1; w<=n; w++)
				if((dist[w]< min) && (visited[w]==0))
				{
					min = dist[w]; 
					v = w;
				}

			visited[v] = 1; 
			count++;
				
			for(int w=1; w<=n; w++)
			{
				if((dist[w]) >(dist[v] + cost[v][w]))
				{
					dist[w] = dist[v] + cost[v][w]; path[w] = v;
				}
			}
		}
	}
		
	static void printpath(int sv,int n,int dist[],int path[], int visited[])
	{
		for(int w=1; w<=n; w++)
		{ 
			if(visited[w] == 1 && w != sv)
			{
				System.out.println("The shortest distance between "); 
				System.out.println(sv+"-> ="+w+" is :"+ dist[w]);

				int t=path[w]; 
				System.out.println("The path is:"); 
				System.out.print(" "+w);

				while(t != sv)
				{ 
					System.out.print("<-->"+t); 
					t=path[t];
				}
				System.out.print("<-->"+sv);
			}
		}
	} 

}

/*
Enter the number of nodes: 
6
Enter the cost matrix
0 4 99 1 99 99
4 0 2 2 99 99
99 2 0 3 1 12
1 2 0 3 4 99
99 99 1 4 0 7
99 99 12 99 7 0
The entered cost matrix is
0	4	99	1	99	99	
4	0	2	2	99	99	
99	2	0	3	1	12	
1	2	0	3	4	99	
99	99	1	4	0	7	
99	99	12	99	7	0	
Enter the source vertex: 
1
The shortest distance between 
1-> =2 is :3
The path is:
 2<-->4<-->1The shortest distance between 
1-> =3 is :1
The path is:
 3<-->4<-->1The shortest distance between 
1-> =4 is :1
The path is:
 4<-->1The shortest distance between 
1-> =5 is :2
The path is:
 5<-->3<-->4<-->1The shortest distance between 
1-> =6 is :9
The path is:
 6<-->5<-->3<-->4<-->1
*/
